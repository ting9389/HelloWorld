public class BitOperator{
	
	public static void main(String[] args) {
		//java中的7个位运算符：按位与&，按位或｜，按位异或^，按位取反～
		//计算 2&3=？
		/*
		 分析：
		 第一步：先求2和3的补码
		 第二步：因为2和3都是整数，原码，反码，补码都一样（三码合一），原码即补码
		 第三步：按位与&，两位全为1.结果为1.否则为0
		 
		 求解：
		 2的原码：00000000	00000000	00000000	00000010
		 3的原码：00000000	00000000	00000000	00000011
		 2&3：	 00000000	00000000	00000000	00000010	#计算的是补码，看运算结果看原码，因为是整数，即三码合一，故结果为2
		 */
		int num = 2&3;
		System.out.println("2&3=" + num);
		
		//计算～-2=？
		/*
		 分析：
		 第一步：先求-2的补码
		 第二步：-2的补码=反码+1
		 第三步：负数的反码=它的原码符号位不变，其它位取反（0->1,1->0)
		 第四步：按位取反～ 得到补码后，按位取反。
		 第五步：再将其转为原码，看结果
		 
		 求解：
		 -2的原码：10000000	00000000	00000000	00000010
		 -2的反码：11111111	11111111	11111111	11111101
		 -2的补码：11111111	11111111	11111111	11111110
		 ～-2取反：00000000	00000000	00000000	00000001	#二进制最高位是符号位，0表示正数，1表示负数，故结果位1
		 */
		System.out.println("～-2=" + ~-2);
		
		//计算～2=？
		/*
		 2的原码：00000000	00000000	00000000	00000010
		 最高位为0，表正数：补码也为	00000000	00000000	00000000	00000010
		 ～2取反为：11111111	11111111	11111111	11111101
		 ～2的反码=补码-1:		11111111	11111111	11111111	11111100	#～2反码最高位为1，要转为原码。先求出反码，再将其取反（符号位不变），得到原码
		 ～2的原码：10000000	00000000	00000000	00000011	#结果为-3
		 */
		System.out.println("~2=" + ~2);
		
		//计算2｜3=？
		/*
		 2的原码：00000000	00000000	00000000	00000010
		 3的原码：00000000	00000000	00000000	00000011
		 最高位为正数，三码合一，2的补码：00000000	00000000	00000000	00000010
		 最高位为正数，三码合一，3的补码：00000000	00000000	00000000	00000011
		 按位或｜，两个有一个为1，结果为1，否则为0:00000000	00000000	00000000	00000011
		 最高为正数，三码合一，即原码也为00000000	00000000	00000000	00000011	#结果为3
		 */
		 System.out.println("2|3=" + (2|3));
		
		//计算2^3=?
		 /*
		 2的原码：00000000	00000000	00000000	00000010
		 3的原码：00000000	00000000	00000000	00000011
		 最高位为正数，三码合一，2的补码：00000000	00000000	00000000	00000010
		 最高位为正数，三码合一，3的补码：00000000	00000000	00000000	00000011
		 按位异或^,两位一个为0，一个为1，结果为1，否则为0:	00000000	00000000	0000000	00000001
		 最高为正数，三码合一，即原码也为00000000	00000000	0000000	00000001	#结果为1
		  */
		 System.out.println("2^3=" + (2^3));
		 System.out.println("1>>2=" + (1>>2));
		
		
		
		
		
		
		
		
		
		
		
	}
}